var documenterSearchIndex = {"docs":
[{"location":"select_region/#Select-Region","page":"Select Regions","title":"Select Region","text":"","category":"section"},{"location":"select_region/","page":"Select Regions","title":"Select Regions","text":"To cut a N dimensional part of an array, we use the following methods:","category":"page"},{"location":"select_region/","page":"Select Regions","title":"Select Regions","text":"select_region\nselect_region!\nselect_region_view","category":"page"},{"location":"select_region/#NDTools.select_region","page":"Select Regions","title":"NDTools.select_region","text":"select_region(src, [new_size]; new_size=size(mat), center=ft_center_diff(size(mat)).+1, \n                   pad_value=zero(eltype(mat)), dst_center = new_size .÷ 2 .+1,\n                   M = nothing)\n\nselects (extracts) a region of interest (ROI), defined by new_size and centered  at center in the source image.  Note that the number of dimensions can be smaller in new_size and center,  in which case the default values will be insterted into the missing dimensions.  new_size does not need to fit into the source array and missing values will be replaced with pad_value.\n\nArguments:\n\nsrc. The array to extract the region from.\nnew_size. The size of the array view after the operation finished. By default the original size is assumed. As an alternative alias, the new_size can also be provided as a second argument.\ncenter. Specifies the center of the new view in coordinates of the old view. By default an alignment of the Fourier-centers is assumed.\ndst_center. defines the center coordinate in the destination array which should align with the above source center. If nothing is provided, the right center pixel of the dst array or new array is used.\npad_value. Specifies the value which is inserted in case the ROI extends to outside the source area.\nM=nothing. Specifies a magnification, if !isnothing(M) then new_size = round.(Int, M .* size(src)) will be set.\n\nThe returned result is a newly allocated array of the same type as the src. This is currently faster that selectregionview().\n\nSee also\n\nselect_region_view\nselect_region!\n\nExamples\n\njulia> select_region(ones(3,3),new_size=(7,7),center=(1,3))\n7×7 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\njulia> a = ones((3,3))\n3×3 Matrix{Float64}:\n 1.0  1.0  1.0\n 1.0  1.0  1.0\n 1.0  1.0  1.0\n\njulia> dst=select_region(a,new_size=(10,10), dst_center=(1,1)) # pad a with zeros to a size of (10,10), but place original center at the corner\n10×10 Matrix{Float64}:\n 1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\nselect_region(src::AbstractArray{T,N}, new_size; M=nothing, \n              center=size(src).÷2 .+1, pad_value=zero(eltype(src)), dst_center = new_size .÷ 2 .+1) where {T,N}\n\nAlias to select_region(src; new_size=new_size, center=center, pad_value=pad_value, dst_center=dst_center)\n\n\n\n\n\n","category":"function"},{"location":"select_region/#NDTools.select_region!","page":"Select Regions","title":"NDTools.select_region!","text":"select_region!(src::AbstractArray{T, N}, dst=nothing, [new_size]; \n                center=size(src).÷2 .+1, dst_center=nothing,\n                new_size=2 .*(1 .+ abs.(dst_center.-(size(src).÷ 2 .+ 1))) .+ size(src),\n                pad_value=zero(eltype(mat), operator!=assign_to!)) where {T,N}\n\nselects (extracts, pads, shifts) a region of interest (ROI), defined by new_size and centered with the destination center aligned at  the position center in the source image. Note that the number of dimensions in new_size,  center and dst_center can be smaller ,  in which case default values (see below) will be insterted into the missing dimensions. new_size does not need to fit into the source array  and missing values will be replaced with pad_value, if no dst is provided.\n\nAs opposed to select_region(), this version returns a copy rather than a view or, alternatively, also writes into a destination array dst  (new_size is then interpreted to refer to the maximally assigned region).  If nothing is provided for dst, a new array of size new_size is created.\n\nArguments:\n\nsrc. The source array to select from.\ndst. The destination array to write into, if provided. By default dst=nothing a new array is created. The dstarray (or new array) is returned. \nnew_size. The size of the array view after the operation finished. By default a maximally large destination size is chosen, which means that any overlap is copied.             If you specify new_size, be aware that the center and dst_center specifications below really have to refer to centers to be copied!             If new_size is not specified, a size to fully encompass the (potentially displaced) source array is automatically chosen.             As an alternative alias, the new_size can also be provided as a third argument.\ncenter. Specifies the center of the new view in coordinates of the old view. By default an alignment of the Fourier-center (right center) is assumed.\ndst_center. defines the center coordinate in the destination array which should align with the above source center. If nothing is provided, the right center pixel of the dst array or new array is used.\npad_value. specifies the value which is inserted in case the ROI extends to outside the source area. This is only used, if no dst array is provided.\noperator!. allows to provide a userdefined array assignment function. The function myop!(dst,src) should operator on array views and typically perform the assignment elementwise, overwriting the entries in dst.               Five such functions are exported by NDTools: assign_to!, add_to!, sub_to!, mul_to!, div_to!, representing the operations .=, .+=, .-=, .*= and ./= respectively.\n\nThe returned results is the destination (or newly created) array. Note that this version is rather fast, since it consists of only a sinlge sub-array assigment on views, avoiding copy operations.\n\nSee also\n\nselect_region_view\nselect_region\n\nExamples:\n\njulia> a = ones(5,6);\n\njulia> dst=select_region(a,new_size=(10,10), dst_center=(1,1)) # pad a with zeros to a size of (10,10), but place original center at the corner\n10×10 Matrix{Float64}:\n 1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n julia> select_region!(2 .*a,dst, dst_center=size(dst)) # write a doubled version into the bottom right corner\n10×10 Matrix{Float64}:\n 1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  2.0  2.0  2.0  2.0\n 0.0  0.0  0.0  0.0  0.0  0.0  2.0  2.0  2.0  2.0\n 0.0  0.0  0.0  0.0  0.0  0.0  2.0  2.0  2.0  2.0\n\n\n\n\n\nfunction select_region!(src::AbstractArray{T, N}, dst, new_size; center=size(src).÷2 .+1, dst_center=size(dst).÷ 2 .+1, operator! =assign_to!) where {T,N}\n\nalias to selectregion!(src, dst; newsize=newsize, center=center, dstcenter=dst_center, operator!=operator!)\n\n\n\n\n\n","category":"function"},{"location":"select_region/#NDTools.select_region_view","page":"Select Regions","title":"NDTools.select_region_view","text":"select_region_view(src::AbstractArray{T,N}, [new_size]; new_size=size(src), center=ft_center_diff(size(src)).+1, dst_center=ft_center_diff(new_size), pad_value=zero(eltype(src)))\n\nselects (extracts) a region of interest (ROI), defined by new_size and centered at center in the source image. Note that the number of dimensions can be smaller in new_size and center, in which case the default values will be insterted into the missing dimensions. new_size does not need to fit into the source array and missing values will be replaced with pad_value.\n\nArguments:\n\nsrc. The source array to select from.\nnew_size. The size of the array view after the operation finished. By default the original size is assumed. As an alternative aliaws, the new_size can also be provided as a second argument.\ncenter. Specifies the center of the new view in coordinates of the old view. By default an alignment of the Fourier-centers is assumed.\ndst_center. Specifies the destination center of the new view to be mapped to the source center as given by center. \npad_value. Specifies the value which is inserted in case the ROI extends to outside the source area.\n\nThe returned results is a mutable view, which allows this method to also be used for writing into a ROI\n\nSee also\n\nselect_region\nselect_region!\n\nExamples\n\njulia> select_region_view(ones(3,3),new_size=(7,7),center=(1,3))\n7×7 MutableShiftedArrays.MutableShiftedArray{Float64, Float64, 2, Matrix{Float64}}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\nselect_region_view(src::AbstractArray{T,N}, new_size; center=ft_center_diff(size(src)).+1, dst_center=ft_center_diff(Tuple(expand_size(new_size, size(src)))).+1, pad_value=zero(eltype(src))) where {T,N}\n\nalias to selectregionview(src; newsize=newsize, center=center, dstcenter=dstcenter, padvalue=padvalue)\n\n\n\n\n\n","category":"function"},{"location":"select_region/#Slice","page":"Select Regions","title":"Slice","text":"","category":"section"},{"location":"select_region/","page":"Select Regions","title":"Select Regions","text":"slice\nNDTools.slice_indices","category":"page"},{"location":"select_region/#NDTools.slice","page":"Select Regions","title":"NDTools.slice","text":"slice(arr, dim, index)\n\nReturn a N dimensional slice view (where one dimensions has size 1) of the N-dimensional arr at the index position (or range) index in the dim dimension of the array. It holds size(out)[dim] == 1.\n\nExamples\n\njulia> x = [1 2 3; 4 5 6; 7 8 9]\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n\njulia> NDTools.slice(x, 1, 1)\n1×3 view(::Matrix{Int64}, 1:1, 1:3) with eltype Int64:\n 1  2  3\n\n\n\n\n\n","category":"function"},{"location":"select_region/#NDTools.slice_indices","page":"Select Regions","title":"NDTools.slice_indices","text":"slice_indices(a, dim, index)\n\nArguments:\n\na should be the axes obtained by axes(arr) of an array. dim is the dimension to be selected and index the index of it. index can be an integer or a range,but the dimensions is always kepts\n\nReturns: a tuple of ranges used for slicing\n\nExamples\n\njulia> NDTools.slice_indices((1:10, 1:20, 1:12, 1:33), 1, 3)\n(3:3, 1:20, 1:12, 1:33)\n\n\n\n\n\n","category":"function"},{"location":"reverse_view/#reverse-with-view","page":"Reverse views","title":"reverse with view","text":"","category":"section"},{"location":"reverse_view/","page":"Reverse views","title":"Reverse views","text":"Reverse a multidimensional array with a view instead of a copy.","category":"page"},{"location":"reverse_view/","page":"Reverse views","title":"Reverse views","text":"NDTools.reverse_view","category":"page"},{"location":"reverse_view/#NDTools.reverse_view","page":"Reverse views","title":"NDTools.reverse_view","text":"reverse_view(A::AbstractArray{T, N}; \n             dims=ntuple(identity, Val(N))) where {T, N}\n\nCreates a view of an array A which reverses all dimensions in dims. Per default, dims is set to reverse all dimensions! It is equivalent to reverse(A, dims=dims) but instead uses a view.\n\nExamples\n\njulia> A = [1 2 3; 4 5 6]\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\njulia> reverse_view(A, dims=1)\n2×3 view(::Matrix{Int64}, 2:-1:1, 1:3) with eltype Int64:\n 4  5  6\n 1  2  3\n\njulia> reverse(A, dims=1)\n2×3 Matrix{Int64}:\n 4  5  6\n 1  2  3\n\njulia> reverse_view(A, dims=(1,2))\n2×3 view(::Matrix{Int64}, 2:-1:1, 3:-1:1) with eltype Int64:\n 6  5  4\n 3  2  1\n\njulia> reverse(A, dims=(1,2))\n2×3 Matrix{Int64}:\n 6  5  4\n 3  2  1\n\n\n\n\n\n","category":"function"},{"location":"center/#Center-Conventions","page":"Center Methods","title":"Center Conventions","text":"","category":"section"},{"location":"center/","page":"Center Methods","title":"Center Methods","text":"Some types to adress the center.","category":"page"},{"location":"center/#Types","page":"Center Methods","title":"Types","text":"","category":"section"},{"location":"center/","page":"Center Methods","title":"Center Methods","text":"NDTools.Center\nNDTools.CenterMiddle\nNDTools.CenterFirst\nNDTools.CenterLast\nNDTools.CenterFT","category":"page"},{"location":"center/#NDTools.Center","page":"Center Methods","title":"NDTools.Center","text":"Center\n\nAbstract supertype for all Center types.\n\nSee CenterFirst, CenterLast, CenterMiddle, CenterFT.\n\n\n\n\n\n","category":"type"},{"location":"center/#NDTools.CenterMiddle","page":"Center Methods","title":"NDTools.CenterMiddle","text":"CenterMiddle\n\nType to indicate that the center should be  at the mathematical center of the array (if interpreted as a N dimensional volume). This corresponds in an array with size (5,4,3) to  the indices (3,2.5,2).\n\n\n\n\n\n","category":"type"},{"location":"center/#NDTools.CenterFirst","page":"Center Methods","title":"NDTools.CenterFirst","text":"CenterFirst\n\nType to indicate that the center should be  at the first entry of the array. This corresponds to the indices (1,1,1,...).\n\n\n\n\n\n","category":"type"},{"location":"center/#NDTools.CenterLast","page":"Center Methods","title":"NDTools.CenterLast","text":"CenterEnd\n\nType to indicate that the center should be  at the last entry of the array. This corresponds in an array with size (5,4,3) to  the indices (5,4,3).\n\n\n\n\n\n","category":"type"},{"location":"center/#NDTools.CenterFT","page":"Center Methods","title":"NDTools.CenterFT","text":"CenterFT\n\nType to indicate that the center should be  at the center defined in the FFT sense. This corresponds in an array with size (5,4,3) to  the indices (3,3,2).\n\n\n\n\n\n","category":"type"},{"location":"center/#Functions","page":"Center Methods","title":"Functions","text":"","category":"section"},{"location":"center/","page":"Center Methods","title":"Center Methods","text":"NDTools.center","category":"page"},{"location":"center/#NDTools.center","page":"Center Methods","title":"NDTools.center","text":"center(sz::NTuple{N, T}, ::Type{<:Center})\n\nReturn the corresponding center of an array with size sz. Depending on the Center type the center is chosen. See CenterFirst, CenterLast, CenterMiddle, CenterFT.\n\njulia> center((1,2,3,4), CenterFirst)\n(1, 1, 1, 1)\n\njulia> center((1,2,3,4), CenterLast)\n(1, 2, 3, 4)\n\njulia> center((1,2,3,4), CenterMiddle)\n(1.0, 1.5, 2.0, 2.5)\n\njulia> center((1,2,3,4), CenterFT)\n(1, 2, 2, 3)\n\n\n\n\n\ncenter(sz::NTuple{N, T}, j<:Number)\n\nReturn an tuple with the same length as sz and  with entries j.\n\nExamples\n\njulia> center((2,2), 1)\n(1, 1)\n\njulia> center((2,2, 5), 3)\n(3, 3, 3)\n\n\n\n\n\ncenter(sz::NTuple{N, T}, ctr::NTuple{N, T})\n\nReturn ctr.\n\nExamples\n\njulia> center((1,2), (1,1))\n(1, 1)\n\njulia> center((1,3), (1,1))\n(1, 1)\n\n\n\n\n\n","category":"function"},{"location":"dims/#Dimensionality-Functions","page":"Dimensionality Functions","title":"Dimensionality Functions","text":"","category":"section"},{"location":"dims/","page":"Dimensionality Functions","title":"Dimensionality Functions","text":"expand_dims\nexpand_size\nselect_sizes\nselect_sizes_squeeze\nreorient\nidx_to_dim","category":"page"},{"location":"dims/#NDTools.expand_dims","page":"Dimensionality Functions","title":"NDTools.expand_dims","text":"expand_dims(x, ::Val{N})\n\nExpands the dimensions of an array to a given number of dimensions.\n\nExamples The result is a 5D array with singleton dimensions at the end\n\njulia> expand_dims(ones((1,2,3)), Val(5))\n1×2×3×1×1 Array{Float64, 5}:\n[:, :, 1, 1, 1] =\n 1.0  1.0\n\n[:, :, 2, 1, 1] =\n 1.0  1.0\n\n[:, :, 3, 1, 1] =\n 1.0  1.0\n\n\n\n\n\nexpand_dims(x::AbstractArray{T, N}, dims::Vararg{Int, M})  where {T, N, M}\n\nInsert singleton dimensions at the position of dims into x. Based on a reshape operation.\n\nExamples\n\njulia> expand_dims(zeros((2,2)), 1) |> size\n(1, 2, 2)\n\njulia> expand_dims(zeros((2,2)), 2) |> size\n(2, 1, 2)\n\njulia> expand_dims(zeros((2,2)), 3) |> size\n(2, 2, 1)\n\njulia> expand_dims(zeros((2,2)), 1,3,4) |> size\n(1, 2, 1, 1, 2)\n\n\n\n\n\n","category":"function"},{"location":"dims/#NDTools.expand_size","page":"Dimensionality Functions","title":"NDTools.expand_size","text":"expand_size(sz,sz2)\n\nExpands a size tuple sz with the sizes as given in the tuple sz2 for positions which do not exist in sz.  Typically one wants to\n\nExample:\n\njulia> expand_size((1,2,3),(4,5,6,7,8,9))\n(1, 2, 3, 7, 8, 9)\n\n\n\n\n\n","category":"function"},{"location":"dims/#NDTools.select_sizes","page":"Dimensionality Functions","title":"NDTools.select_sizes","text":"select_sizes(x::AbstractArray, dim)\n\nAdditional size method to access the size at several dimensions in one call. Keep singleton dimensions.\n\nExamples\n\njulia> x = ones((2,4,6,8, 10));\n\njulia> select_sizes(x, (2,3))\n(1, 4, 6, 1, 1)\n\njulia> select_sizes(x, 5)\n(1, 1, 1, 1, 10)\n\njulia> select_sizes(x, (5,))\n(1, 1, 1, 1, 10)\n\n\n\n\n\n","category":"function"},{"location":"dims/#NDTools.select_sizes_squeeze","page":"Dimensionality Functions","title":"NDTools.select_sizes_squeeze","text":"select_sizes_squeeze(x::AbstractArray, dim)\n\nAdditional size method to access the size at several dimensions in one call. Remove singleton dimensions.\n\nSee also select_sizes which does not remove singleton dimensions.\n\nExamples\n\njulia> select_sizes_squeeze(randn((5,6,7)), (2,3))\n(6, 7)\n\njulia> select_sizes_squeeze(randn((5,6,7)), 2)\n(6,)\n\n\n\n\n\n","category":"function"},{"location":"dims/#NDTools.reorient","page":"Dimensionality Functions","title":"NDTools.reorient","text":"reorient(vec, d::Val{dim}, total_dims=d)\n\nReorients a 1D vector vec along dimension dim. The total output dimension is total_dims.\n\nType stable version of reorient!\n\njulia> reorient([1,2,3,4], Val(2))\n1×4 Matrix{Int64}:\n 1  2  3  4\n\njulia> reorient([1,2,3,4], 2, Val(3))\n1×4×1 Array{Int64, 3}:\n[:, :, 1] =\n 1  2  3  4\n\njulia> x = reshape(1:9, 3, 3);\n\njulia> reorient([1,2,3], 2, Val(ndims(x)))\n1×3 Matrix{Int64}:\n 1  2  3\n\n\n\n\n\n","category":"function"},{"location":"dims/#NDTools.idx_to_dim","page":"Dimensionality Functions","title":"NDTools.idx_to_dim","text":"idx_to_dim(idx_arr)\n\nConverts an N-dimensional array of NTuple to an N+1 dimensional array by orienting the (inner) tuple along the (outer) trailing+1 dimension. Note that this function is not type stable!\n\nSee also: idx_to_view which reinterprets the array to an N+1 dimensional array by unrolling the (inner) tuple. Arguments:\n\nidx_arr. The array of NTuple to convert\n\nExample:\n\njulia> idx_to_dim([(x,y) for x in 1:3, y in 1:3])\n3×3×2 Array{Int64, 3}:\n[:, :, 1] =\n 1  1  1\n 2  2  2\n 3  3  3\n\n[:, :, 2] =\n 1  2  3\n 1  2  3\n 1  2  3\n\n\n\n\n\n","category":"function"},{"location":"base_extensions/#Base-Extensions-for-working-with-ND-Data","page":"Base Extensions for working with ND Data","title":"Base Extensions for working with ND Data","text":"","category":"section"},{"location":"base_extensions/","page":"Base Extensions for working with ND Data","title":"Base Extensions for working with ND Data","text":"NDTools.sumdropdims","category":"page"},{"location":"base_extensions/#NDTools.sumdropdims","page":"Base Extensions for working with ND Data","title":"NDTools.sumdropdims","text":"sumdropdims(arr; dims)\n\nAlias for dropdims(sum(arr, dims=dims), dims=dims)\n\n\n\n\n\nsumdropdims(f, arr; dims)\n\nAlias for dropdims(sum(f, arr, dims=dims), dims=dims)\n\n\n\n\n\n","category":"function"},{"location":"#NDTools.jl","page":"NDTools.jl","title":"NDTools.jl","text":"","category":"section"},{"location":"","page":"NDTools.jl","title":"NDTools.jl","text":"NDTools.jl is a lightweight package providing functionality for N dimensional data handling.","category":"page"},{"location":"","page":"NDTools.jl","title":"NDTools.jl","text":"Install NDTools.jl via the package manager.","category":"page"},{"location":"","page":"NDTools.jl","title":"NDTools.jl","text":"julia> add NDTools.jl","category":"page"},{"location":"","page":"NDTools.jl","title":"NDTools.jl","text":"Check out the sub pages for different applications.","category":"page"}]
}
